// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

syntax = "proto3";

import "tools/google/protobuf/timestamp.proto";
import "tools/google/protobuf/duration.proto";

package BuildXL.Execution.Analyzer;

option csharp_namespace = "BuildXL.Execution.Analyzer.Xldb";

//
// Enums
//

// Note that enum values use C++ scoping rules, meaning that enum values are siblings of their type, 
// not children of it. Therefore, enum values must be unique within "BuildXL.Execution.Analyzer", not 
// just within a particular enum. If there are conflicting enum values, append the name of the enum in front.
// ie: ChooseWorkerCpu ---> PipExecutionStep_ChooseWorkerCpu

enum ExecutionEventId{
    FileArtifactContentDecided = 0;
    WorkerList = 1;
    ExecutionEventId_PipExecutionPerformance = 2;
    DirectoryMembershipHashed = 3;

    // Deprecated in favor of ProcessFingerprintComputation (enum 10)
    ObservedInputs = 4; 

    ProcessExecutionMonitoringReported = 5;
    ExecutionEventId_ExtraEventDataReported = 6;
    DependencyViolationReported = 7;
    PipExecutionStepPerformanceReported = 8;
    ResourceUsageReported = 9;
    ProcessFingerprintComputation = 10;
    PipCacheMiss = 11;
    PipExecutionDirectoryOutputs = 12;
    DominoInvocation = 13;
}

enum PipOutputOrigin{
    Produced = 0;
    UpToDate = 1;
    DeployedFromCache = 2;
    NotMaterialized = 3;
}

enum PipExecutionStep{
    PipExecutionStep_None = 0;
    Start = 1;
    Cancel = 2;
    SkipDueToFailedDependencies = 3;
    CheckIncrementalSkip = 4;
    MaterializeInputs = 5;
    MaterializeOutputs = 6;
    ExecuteNonProcessPip = 7;
    PipExecutionStep_CacheLookup = 8;
    RunFromCache = 9;
    ExecuteProcess = 10;
    PostProcess = 11;
    HandleResult = 12;
    PipExecutionStep_ChooseWorkerCpu = 13;
    PipExecutionStep_ChooseWorkerCacheLookup = 14;
    Done = 15;
}

enum WorkDispatcher_DispatcherKind{
    WorkDispatcherKind_None = 0;
    IO = 1;
    WorkDispatcher_DispatcherKind_CPU = 2;
    Light = 3;
    WorkDispatcher_DispatcherKind_CacheLookup = 4;
    WorkDispatcher_DispatcherKind_ChooseWorkerCpu = 5;
    WorkDispatcher_DispatcherKind_ChooseWorkerCacheLookup = 6;
    Materialize = 7;
}

enum FileMonitoringViolationAnalyzer_DependencyViolationType{
    DoubleWrite = 0;
    ReadRace = 1;
    UndeclaredOrderedRead = 2;
    MissingSourceDependency = 3;
    UndeclaredReadCycle = 4;
    UndeclaredOutput = 5;
    ReadUndeclaredOutput = 6;
    WriteInSourceSealDirectory = 7;
    WriteInUndeclaredSourceRead = 8;
    WriteInExistingFile = 9;
    WriteOnAbsentPathProbe = 10;
    AbsentPathProbeUnderUndeclaredOpaque = 11;
    WriteToTempPathInsideSharedOpaque = 12;
}

enum FileMonitoringViolationAnalyzer_AccessLevel{
    FileMonitoringViolationAnalyzer_AccessLevel_Read = 0;
    FileMonitoringViolationAnalyzer_AccessLevel_Write = 1;
}

enum PipCacheMissType{
    Invalid = 0;
    MissForDescriptorsDueToStrongFingerprints = 53;
    MissForDescriptorsDueToWeakFingerprints = 54;
    MissForDescriptorsDueToArtificialMissOptions = 55;
    MissForCacheEntry = 56;
    MissDueToInvalidDescriptors = 57;
    MissForProcessMetadata = 58;
    MissForProcessMetadataFromHistoricMetadata = 59;
    MissForProcessOutputContent = 60;
    Hit = 51;
    MissForProcessConfiguredUncacheable = 61;
}

enum ExecutionSampler_LimitingResource{
    GraphShape = 0;
    ExecutionSampler_LimitingResource_CPU = 1;
    Disk = 2;
    Memory = 3;
    ConcurrencyLimit = 4;
    ProjectedMemory = 5;
    Semaphore = 6;
    Other = 7;
}

enum CreationDisposition{
    // First enum value in proto must be 0
    CreationDisposition_DEFAULT_ZERO = 0;
    CREATE_NEW = 1;
    CREATE_ALWAYS = 2;
    OPEN_EXISTING = 3;
    OPEN_ALWAYS = 4;
    TRUNCATE_EXISTING = 5;
}

enum DesiredAccess{
    // First enum value in proto must be 0
    DesiredAccess_DEFAULT_ZERO = 0;
    DELETE = 0x00010000;
    SYNCHRONIZE = 0x00100000;
    FILE_APPEND_DATA = 0x00000004;
    FILE_WRITE_EA = 0x00000010;
    FILE_WRITE_ATTRIBUTES = 0x00000100;
    FILE_WRITE_DATA = 0x00000002;
    GENERIC_ALL = 0x10000000;
    GENERIC_EXECUTE = 0x20000000;
    GENERIC_WRITE = 0x40000000;
    GENERIC_READ = -2147483648;
}

enum FlagsAndAttributes{
    // First enum value in proto must be 0
    FlagsAndAttributes_DEFAULT_ZERO = 0;
    FILE_ATTRIBUTE_READONLY = 0x00000001;
    FILE_ATTRIBUTE_HIDDEN = 0x00000002;
    FILE_ATTRIBUTE_SYSTEM = 0x00000004;
    FILE_ATTRIBUTE_ARCHIVE = 0x00000020;
    FILE_ATTRIBUTE_NORMAL = 0x00000080;
    FILE_ATTRIBUTE_TEMPORARY = 0x00000100;
    FILE_ATTRIBUTE_OFFLINE = 0x00001000;
    FILE_ATTRIBUTE_ENCRYPED = 0x00004000;
    FILE_FLAG_OPEN_NO_RECALL = 0x00100000;
    FILE_FLAG_OPEN_REPARSE_POINT = 0x00200000;
    FILE_FLAG_SESSION_AWARE = 0x00800000;
    FILE_FLAG_POSIX_SEMANTICS = 0x01000000;
    FILE_FLAG_BACKUP_SEMANTICS = 0x02000000;
    FILE_FLAG_DELETE_ON_CLOSE = 0x04000000;
    FILE_FLAG_SEQUENTIAL_SCAN = 0x08000000;
    FILE_FLAG_RANDOM_ACCESS = 0x10000000;
    FILE_FLAG_NO_BUFFERING = 0x20000000;
    FILE_FLAG_OVERLAPPED = 0x40000000;
    FILE_FLAG_WRITE_THROUGH = -2147483648;
}

enum ShareMode{
    FILE_SHARE_NONE = 0x0;
    FILE_SHARE_READ = 0x1;
    FILE_SHARE_WRITE = 0x2;
    FILE_SHARE_DELETE = 0x4;
}

enum FileAccessStatus{
    FileAccessStatus_None = 0;
    Allowed = 1;
    Denied = 2;
    CannotDetermineByPolicy = 3;
}

enum FileAccessStatusMethod{
    PolicyBased = 0;
    FileExistenceBased = 1;
}

enum RequestedAccess{
    RequestedAccess_None = 0;
    RequestedAccess_Read = 1;
    RequestedAccess_Write = 2;
    Probe = 4;
    Enumerate = 8;
    EnumerationProbe = 16;
    // Read | Write = 1 | 2 = 3
    ReadWrite = 3; 
    // Read | Write | Probe | Enumerate | EnumerationProbe
    All = 31;
}

enum ReportedFileOperation{
    Unknown = 0;
    CreateFile = 1;
    GetFileAttributes = 2;
    GetFileAttributesEx = 3;
    ReportedFileOperation_Process = 4;
    FindFirstFileEx = 5;
    FindNextFile = 6;
    CreateDirectory = 7;
    DeleteFile = 8;
    MoveFileSource = 9;
    MoveFileDestination = 10;
    SetFileInformationByHandleSource = 11;
    SetFileInformationByHandleDest = 12;
    ZwSetRenameInformationFileSource = 13;
    ZwSetRenameInformationFileDest = 14;
    ZwSetLinkInformationFile = 15;
    ZwSetDispositionInformationFile = 16;
    ZwSetModeInformationFile = 17;
    ZwSetFileNameInformationFileSource = 18;
    ZwSetFileNameInformationFileDest = 19;
    CopyFileSource = 20;
    CopyFileDestination = 21;
    CreateHardLinkSource = 22;
    CreateHardLinkDestination = 23;
    RemoveDirectory = 24;
    NtQueryDirectoryFile = 25;
    ZwQueryDirectoryFile = 26;
    NtCreateFile = 27;
    ZwCreateFile = 28;
    ZwOpenFile = 29;
    ChangedReadWriteToReadAccess = 30;
    FirstAllowWriteCheckInProcess = 31;
    ReparsePointTarget = 32;
    CreateSymbolicLinkSource = 33;
    MoveFileWithProgressSource = 34;
    MoveFileWithProgressDest = 35;
    MultipleOperations = 36;
    ProcessExit = 37;
    MacLookup = 38;
    MacReadlink = 39;
    MacVNodeCreate = 40;
    KAuthMoveSource = 41;
    KAuthMoveDest = 42;
    KAuthCreateHardlinkSource = 43;
    KAuthCreateHardlinkDest = 44;
    KAuthCopySource = 45;
    KAuthCopyDest = 46;
    KAuthDeleteDir = 47;
    KAuthDeleteFile = 48;
    KAuthOpenDir = 49;
    KAuthReadFile = 50;
    KAuthCreateDir = 51;
    KAuthWriteFile = 52;
    KAuthClose = 53;
    KAuthCloseModified = 54;
    KAuthGetAttributes = 55;
    KAuthVNodeExecute = 56;
    KAuthVNodeWrite = 57;
    KAuthVNodeRead = 58;
    KAuthVNodeProb = 59;
}

enum FingerprintComputationKind{
    Execution = 0;
    CacheCheck = 1;
}

enum ObservedInputType{
    AbsentPathProbe = 0;
    FileContentRead = 1;
    DirectoryEnumeration = 2;
    ExistingDirectoryProbe = 3;
    ExistingFileProbe = 4;
}

enum PreserveOutputsMode{
    Disabled = 0;
    Enabled = 1;
    Reset = 2;
}

enum SandboxKind{
    SandboxKind_None = 0;
    Default = 1;
    WinDetours = 2;
    MaxOsKext = 3;
    MacOsKextIgnoreFileAccesses = 4;
}

enum DoubleWritePolicy{
    DoubleWritesAreErrors = 0;
    AllowSameContentDoubleWrites = 1;
    UnsafeFirstDoubleWriteWins = 2;
}

enum GraphCacheFile{
    PreviousInputs = 0;
    GraphCacheFile_PipTable = 1;
    GraphCacheFile_PathTable = 2;
    StringTable = 3;
    SymbolTable = 4;
    QualifierTable = 5;
    GraphCacheFile_MountPathExpander = 6;
    ConfigState = 7;
    GraphCacheFile_DirectedGraph = 8;
    GraphCacheFile_PipGraph = 9;
    PipGraphId = 10;
    HistoricTableSizes = 11;
}

enum PipType{
    WriteFile = 0;
    CopyFile = 1;
    PipType_Process = 2;
    Ipc = 3;
    Value = 4;
    SpecFile = 5;
    Module = 6;
    HashSourceFile = 7;
    PipType_SealDirectory = 8;
}

enum SealDirectoryType{
    SealDirectory = 0;
    CompositeSharedOpaqueDirectory = 1;
}

//
// Helper Structs
//

message AbsolutePath{
    string Value = 1;
}

message ContentHash{
    string Value = 1;
}

message FileArtifact{
    AbsolutePath path = 1;

    int32 RewriteCount = 2;
}

message FileContentInfo{
    // [IsKnownExistenceFlag | Existence | IsKnownLengthFlag | Length]; 
    int64 LengthAndExistence = 1;

    ContentHash Hash = 2;
}

message PipExecutionPerformance{
    int32 PipExecutionLevel = 1;

    google.protobuf.Timestamp ExecutionStart = 2;
    
    google.protobuf.Timestamp ExecutionStop = 3;
}

message ProcessPipExecutionPerformance{
    google.protobuf.Duration ProcessExecutionTime = 1;
    
    IOTypeCounters ReadCounters = 2;

    IOTypeCounters WriteCounters = 3;

    IOTypeCounters OtherCounters = 4;
    
    google.protobuf.Duration UserTime = 5;

    google.protobuf.Duration KernelTime = 6;

    uint64 PeakMemoryUsage = 7;

    int32 PeakMemoryUsageMb = 8;

    uint32 NumberOfProcesses = 9;

    FileMonitoringViolationCounters FileMonitoringViolationCounters = 10;

    Fingerprint Fingerprint = 11;

    uint64 CacheDescriptorId = 12;
}

message FileMonitoringViolationCounters{
    int32 NumFileAccessesWhitelistedButNotCacheable = 1;

    int32 NumFileAccessesWhitelistedAndCacheable = 2;

    int32 NumFileAccessViolationsNotWhitelisted = 3;
}

message Fingerprint{
    int32 Length = 1;

    bytes Bytes = 2;
}

message IOTypeCounters{
    uint64 OperationCount = 1;

    uint64 TransferCOunt = 2;
}

message ReportedProcess{
    string Path = 1;

    uint32 ProcessId = 2;

    string ProcessArgs = 3;

    IOTypeCounters ReadCounters = 4;

    IOTypeCounters WriteCounters = 5;

    IOTypeCounters OtherCounters = 6;

    google.protobuf.Timestamp CreationTime = 7;

    google.protobuf.Timestamp ExitTime = 8;

    google.protobuf.Duration KernelTime = 9;

    google.protobuf.Duration UserTime = 10;

    uint32 ExitCode = 11;

    uint32 ParentProcessId = 12;
}

message ReportedFileAccess{
    CreationDisposition CreationDisposition = 1;

    DesiredAccess DesiredAccess = 2;

    uint32 Error = 3;

    uint64 Usn = 4;

    FlagsAndAttributes FlagsAndAttributes = 5;

    string Path = 6;

    string ManifestPath = 7;

    ReportedProcess Process = 8;

    ShareMode ShareMode = 9;

    FileAccessStatus Status = 10;

    FileAccessStatusMethod Method = 11;

    RequestedAccess RequestedAccess = 12;

    ReportedFileOperation Operation = 13;

    bool ExplicitlyReported = 14;

    string EnumeratePattern = 15;
}

message ProcessDetouringStatusData{
    uint64 ProcessID = 1;

    uint32 ReportStatus = 2;

    string ProcessName = 3;

    string StartApplicationName = 4;

    string StartCommandLine = 5;

    bool NeedsInjection = 6;

    uint64 Job = 7;

    bool DisableDetours = 8;

    uint32 CreationFlags = 9;

    bool Detoured = 10;

    uint32 Error = 11;
}

message WeakContentFingerPrint{
    Fingerprint Hash = 1;
}

message StrongContentFingerPrint{
    Fingerprint Hash = 1;
}

message ObservedPathEntry{
    AbsolutePath Path = 1;

    string EnumeratePatternRegex = 2;
}

message UnsafeSandboxConfiguration{
    PreserveOutputsMode PreserveOutputs = 1;

    bool MonitorFileAccesses = 2;

    bool IgnoreZwRenameFileInformation = 3;

    bool IgnoreZwOtherFileInformation = 4;

    bool IgnoreNonCreateFileReparsePoints = 5;

    bool IgnoreSetFileInformationByHandle = 6;

    bool IgnoreReparsePoints = 7;

    bool IgnorePreloadedDlls = 8;

    bool ExistingDirectoryProbesAsEnumerations = 9;

    bool MonitorNtCreateFile = 10;

    bool MonitorZwCreateOpenQueryFile = 11;

    SandboxKind SandboxKind = 12;

    bool UnexpectedFileAccessesAreErrors = 13;

    bool IgnoreGetFinalPathNameByHandle = 14;

    bool IgnoreDynamicWritesOnAbsentProbes = 15;

    DoubleWritePolicy DoubleWritePolicy = 16;

    bool IgnoreUndeclaredAccessesUnderSharedOpaques = 17;
}

message UnsafeOptions{
    ContentHash PreserveOutputsSalt = 1;

    UnsafeSandboxConfiguration UnsafeConfiguration = 2;
}

message StringId{
    int32 Value = 1;
}

message ObservedInput{
    ObservedInputType Type = 1;

    ContentHash Hash = 2;

    ObservedPathEntry PathEntry = 3;

    AbsolutePath Path = 4;

    bool IsSearchPath = 5;

    bool IsDirectoryPath = 6;

    bool DirectoryEnumeration = 7;
}

message ObservedPathSet{
    repeated ObservedPathEntry Paths = 1;

    repeated StringId ObservedAccessedFileNames = 2;

    UnsafeOptions UnsafeOptions = 3;
}

message ProcessStrongFingerprintComputationData{
    ObservedPathSet PathSet = 1;

    ContentHash PathSetHash = 2;

    repeated ObservedPathEntry PathEntries = 3;

    UnsafeOptions UnsafeOptions = 4;

    repeated StringId ObservedAccessedFileNames = 5;

    repeated StrongContentFingerPrint PriorStrongFingerprints = 6;

    bool Succeeded = 7;

    bool IsStrongFingerprintHit = 8;

    StrongContentFingerPrint ComputedStrongFingerprint = 9;

    repeated ObservedInput ObservedInputs = 10;
}

message DirectoryFingerprint{
    ContentHash Hash = 1;
}

message DirectoryOutput{
    DirectoryArtifact DirectoryArtifact = 1;
    
    repeated FileArtifact fileArtifactArray = 2;
}

message DirectoryArtifact{
    bool IsValid = 1;

    AbsolutePath Path = 2;

    uint32 PartialSealID = 3;

    bool IsSharedOpaque = 4;
}

message NodeRange{

}

message ContentFingerprint{

}

message PipGraphStaticFingerprints{
    
}